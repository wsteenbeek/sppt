% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sppt_boot.R
\name{sppt_boot_new}
\alias{sppt_boot_new}
\title{Performs a Spatial Point Pattern Test with resampling of both Base and Test
datasets. (global, robust, and generalized S-value)}
\usage{
sppt_boot_new(
  base_points.sp,
  test_points.sp,
  uoa.sp,
  nsamples = 200,
  percpoints = 85,
  conf_level = 95,
  bootstrap = TRUE
)
}
\arguments{
\item{base_points.sp}{the Base data of type SpatialPoints*}

\item{test_points.sp}{the Test data of type SpatialPoints*}

\item{uoa.sp}{the units of analysis of type SpatialPolygons*}

\item{nsamples}{number of samples in simulations, default = 200}

\item{percpoints}{percentage of points used in simulations if bootstrap = FALSE, default = 85}

\item{conf_level}{confidence interval, default = 95}

\item{bootstrap}{logical. should bootstrap sampling be done (i.e. with replacement?) default = TRUE}
}
\value{
Returns the \code{uoa.sp} spatialobject including sppt outcomes.
}
\description{
This function is different from the original sppt() in that it
does a (bootstrapped) resampling procedure on both Base and Test data,
instead of just on the Test data.
}
\details{
After a (bootstrapped) resample, for each areal unit the difference between
the two percentages is calculated immediately (and this is done nsamples
times). If the 95% distribution of the differences between (resampled) Base
and Test percentages excludes 0, they are deemed statistically different.

With the default settings of bootstrap = TRUE,
it's a real bootstrap procedure: (a) for each sampling loop (nsamples of
times) as many points are sampled as present in the data (so argument
'percpoints' is ignored, or more precisely, set to 100%!); (b) points are
sampled WITH replacement.

If one wants to mimic the behavior of standard sppt() but with the added
improvement that the choice of Base and Test data does not affect results,
set percpoints to 85 and bootstrap = FALSE.
}
\examples{
# Plot areas, base points data, and test points data
plot(areas.sp)
text(coordinates(areas.sp), label = areas.sp$ID)
text(coordinates(points1.sp), label = points1.sp$ID, col="blue")
text(coordinates(points2.sp), label = points2.sp$ID, col="red")

set.seed(76772)
myoutput <- sppt_boot_new(base_points.sp = points1.sp, test_points.sp = points2.sp, uoa.sp = areas.sp)
summary_sppt(myoutput)
myoutput@data

# Vancouver data
set.seed(9866)
myoutput <- sppt_boot_new(vancouver_points1.sp, vancouver_points2.sp, vancouver_areas.sp)
summary_sppt(myoutput)

# Global-S may not be exactly the same when switching Base for Test
# due to random sampling procedure. Compare by doing the sppt_boot_new() 20 times:
# some global-s values should be the same
set.seed(85335)
reps.output <- replicate(20, mean(sppt_boot_new(vancouver_points1.sp,
       vancouver_points2.sp, vancouver_areas.sp)$globalS.robust, na.rm=TRUE))
set.seed(85335)
reps.output2 <- replicate(20, mean(sppt_boot_new(vancouver_points2.sp,
       vancouver_points1.sp, vancouver_areas.sp)$globalS.robust, na.rm=TRUE))
reps.output
reps.output2
reps.output \%in\% reps.output2

# Mimic the original sppt procedure but with resampling of both Base and Test
set.seed(9866)
myoutput <- sppt_boot_new(points1.sp, points2.sp, areas.sp, bootstrap=FALSE)
summary_sppt(myoutput)
myoutput@data

}
\keyword{internal}
